class BaseDeDonnees
!!!144946.java!!!	BaseDeDonnees(inout context : Context)
        super(context, POOL_DONNEES, null, VERSION_POOL_DONNEES);
        Log.d(TAG, "BaseDeDonnees()");
        if(sqlite == null)
            sqlite = this.getWritableDatabase();
!!!145074.java!!!	onCreate(inout sqlite : SQLiteDatabase) : void
        Log.d(TAG, "onCreate()");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS joueurs (id INTEGER PRIMARY KEY AUTOINCREMENT, nom TEXT UNIQUE NOT NULL, manches INTEGER DEFAULT 0, victoires INTEGER DEFAULT 0, scoreELO DEFAULT 0)");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS manches (id INTEGER PRIMARY KEY AUTOINCREMENT, horodatage DATETIME UNIQUE NOT NULL, gagnantId INTEGER, perdantId INTEGER, numeroTable INTEGER, FOREIGN KEY (gagnantId) REFERENCES joueurs(id) ON DELETE CASCADE, FOREIGN KEY (perdantId) REFERENCES joueurs(id) ON DELETE CASCADE)");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS tours (id INTEGER PRIMARY KEY AUTOINCREMENT, joueurId INTEGER, mancheId INTEGER, FOREIGN KEY (joueurId) REFERENCES joueurs(id) ON DELETE CASCADE, FOREIGN KEY (mancheId) REFERENCES manches(id) ON DELETE CASCADE)");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS empoches (id INTEGER PRIMARY KEY AUTOINCREMENT, tourId INTEGER, poche INTEGER, couleur INTEGER, FOREIGN KEY (tourId) REFERENCES tours(id) ON DELETE CASCADE)");

        initialiserBaseDeDonnees(sqlite);
!!!145202.java!!!	onUpgrade(inout sqlite : SQLiteDatabase, in oldVersion : int, in newVersion : int) : void
        Log.d(TAG, "onUpgrade()");
        sqlite.execSQL("DROP TABLE IF EXISTS empoches");
        sqlite.execSQL("DROP TABLE IF EXISTS tours");
        sqlite.execSQL("DROP TABLE IF EXISTS manches");
        sqlite.execSQL("DROP TABLE IF EXISTS joueurs");
        onCreate(sqlite);
!!!145330.java!!!	getInstance(inout context : Context) : BaseDeDonnees
        if(baseDeDonnees == null)
        {
            baseDeDonnees = new BaseDeDonnees(context);
        }
        return baseDeDonnees;
!!!145458.java!!!	getNbEmpoches(in couleur : int, in joueur : String, in mancheId : int) : int
        if(mancheId == -1)
        {
            Cursor curseur = sqlite.rawQuery("SELECT max(id) FROM manches", null);
            if(curseur.moveToFirst()) {
                mancheId = curseur.getInt(0);
            }
            curseur.close();
        }
        Cursor curseur = sqlite.rawQuery("SELECT COUNT(empoches.couleur) AS count FROM empoches " +
                "INNER JOIN tours ON tours.id = empoches.tourId " +
                "INNER JOIN joueurs ON joueurs.id = tours.joueurId " +
                "WHERE joueurs.nom = '" + joueur + "' " +
                "AND tours.mancheId = '" + mancheId + "' " +
                "AND empoches.couleur = '" + couleur + "'", null);
        if(curseur.moveToFirst())
        {
            int colonne = curseur.getColumnIndex("count");
            if (colonne != DEFAUT) {
                return curseur.getInt(colonne);
            }
        }
        return DEFAUT;
!!!145586.java!!!	ajouterNom(in nomJoueur : String) : void
        try {
            Log.d(TAG, "ajouterNom(" + nomJoueur + ")");
            sqlite.execSQL("INSERT INTO joueurs (nom) VALUES ('" + nomJoueur + "')");
        } catch (SQLiteConstraintException e) {
        Log.d(TAG, "Nom déjà présent dans la base de donnée");
        }
!!!145714.java!!!	ajouterManche(inout joueurs : String [[]], in indexJoueurGagnant : int, inout manche : Vector<Vector<int[]>>, in numeroTable : int) : void
        String gagnant = joueurs[indexJoueurGagnant];
        String perdant = joueurs[(indexJoueurGagnant + 1) % BlackBall.NB_JOUEURS];
        Log.d(TAG, "ajouterManche() gagnant = " + gagnant + " perdant = " + perdant);

        actualiserJoueurs(gagnant, perdant);



        int gagnantId = DEFAUT;
        int perdantId = DEFAUT;
         Cursor curseur = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + gagnant + "'", null);
        if (curseur.moveToFirst()) {
            gagnantId = curseur.getInt(0);
        }
        curseur.close();
        curseur = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + perdant + "'", null);
        if (curseur.moveToFirst()) {
            perdantId = curseur.getInt(0);
        }
        curseur.close();

        //int gagnantId = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + gagnant + "'", null).getInt(0);
        //int perdantId = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + perdant + "'", null).getInt(0);
        try {
            sqlite.execSQL("INSERT INTO manches (horodatage, gagnantId, perdantId, numeroTable) VALUES (datetime('now'), '" + gagnantId + "', '" + perdantId + "', '" + numeroTable + "')");
        } catch (Exception e){
            Log.d(TAG, "INSERT INTO manches " + e );
        }
        int[] participantsId = {perdantId, gagnantId};
        for(int indexTour = 0; indexTour < manche.size(); indexTour++)
        {
            int mancheId = DEFAUT;
            curseur = sqlite.rawQuery("SELECT max(id) FROM manches", null);
            if(curseur.moveToFirst()) {
                mancheId = curseur.getInt(0);
            }
            curseur.close();
            //int mancheId = sqlite.rawQuery("SELECT max(id) FROM manches", null).getInt(0);

            int joueurId = participantsId[(indexTour + indexJoueurGagnant) % BlackBall.NB_JOUEURS];
            try {
                sqlite.execSQL("INSERT INTO tours (joueurId, mancheId) VALUES ('" + joueurId + "', '" + mancheId + "')");
            } catch (Exception e) {
                Log.d(TAG, "INSERT INTO tours " + e );
            }

            for(int indexEmpoche = 0; indexEmpoche < manche.get(indexTour).size();
                indexEmpoche++)
            {
                int poche = manche.get(indexTour).get(indexEmpoche)[0];
                int couleur = manche.get(indexTour).get(indexEmpoche)[1];
                try {
                    sqlite.execSQL("INSERT INTO empoches (tourId, poche, couleur) VALUES ((SELECT max(id) FROM tours), '" + poche + "', '" + couleur + "')");
                } catch (Exception e) {
                    Log.d(TAG, "INSERT INTO empoches " + e );
                }
            }
        }
!!!145842.java!!!	actualiserJoueurs(in gagnant : String, in perdant : String) : void
        int[] donneesGagnant = new int[DONNEES_JOUEUR];
        int[] donneesPerdant = new int[DONNEES_JOUEUR];

        Cursor curseur = sqlite.rawQuery("SELECT manches, victoires, scoreELO FROM joueurs WHERE nom = '" + gagnant + "'", null);
        if (curseur.moveToFirst()) {
            for(int donnee = 0; donnee < DONNEES_JOUEUR; donnee++)
            {
                donneesGagnant[donnee] = curseur.getInt(donnee);
            }
        }
        curseur.close();
        curseur = sqlite.rawQuery("SELECT manches, victoires, scoreELO FROM joueurs WHERE nom = '" + perdant + "'", null);
        if (curseur.moveToFirst()) {
            for(int donnee = 0; donnee < DONNEES_JOUEUR; donnee++)
            {
                donneesPerdant[donnee] = curseur.getInt(donnee);
            }
        }
        curseur.close();

        donneesGagnant[SCORE_ELO] += CONSTANTE_ELO1 / (donneesGagnant[MANCHES] + 1 + donneesGagnant[SCORE_ELO] / (donneesGagnant[VICTOIRES] + 1)) * (1 -(1 /(1 + 10^((donneesPerdant[SCORE_ELO] - donneesGagnant[SCORE_ELO])/CONSTANTE_ELO2))));
        donneesPerdant[SCORE_ELO] += CONSTANTE_ELO1 / (donneesPerdant[MANCHES] + 1 + donneesPerdant[SCORE_ELO] / (donneesPerdant[VICTOIRES] + 1)) * (-1 /(1 + 10^((donneesGagnant[SCORE_ELO] - donneesPerdant[SCORE_ELO])/CONSTANTE_ELO2)));

        sqlite.execSQL("UPDATE joueurs SET manches = manches + 1, victoires = victoires + 1, scoreElO = '" + donneesGagnant[SCORE_ELO] + "' WHERE joueurs.nom = '" + gagnant + "'");
        sqlite.execSQL("UPDATE joueurs SET manches = manches + 1, scoreELO = '" + donneesPerdant[SCORE_ELO] + "' WHERE joueurs.nom = '" + perdant + "'");
!!!145970.java!!!	getNomsJoueurs() : ArrayList<String>
        ArrayList<String> nomsJoueurs = new ArrayList<String>();
        Cursor            curseur      = sqlite.rawQuery("SELECT nom FROM joueurs", null);
        if(curseur.moveToFirst())
        {
            do
            {
                String nomJoueur = curseur.getString(0);
                nomsJoueurs.add(nomJoueur);
            } while(curseur.moveToNext());
        }
        curseur.close();
        Log.d(TAG, "getNomsJoueurs() " + nomsJoueurs);
        return nomsJoueurs;
!!!146098.java!!!	initialiserBaseDeDonnees(inout sqlite : SQLiteDatabase) : void
        Log.d(TAG, "initialiserBaseDeDonnees()");
        // Pour les tests
        sqlite.execSQL(
                "INSERT INTO joueurs(nom, manches, victoires) VALUES ('TRICHET Clément', 3, 3);");
        sqlite.execSQL(
                "INSERT INTO joueurs(nom, manches, victoires) VALUES ('GAUME Benjamin', 3, 0);");
!!!146226.java!!!	getNomsJoueursTries() : Vector<String>
        Log.d(TAG, "getNomsJoueursTries()");

        Cursor curseur = sqlite.rawQuery("SELECT nom FROM joueurs ORDER BY scoreELO DESC, id ASC", null);

        Vector<String> listeJoueurs = new Vector<>();

        while (curseur.moveToNext())
        {
            String nom = curseur.getString(curseur.getColumnIndexOrThrow("nom"));
            listeJoueurs.add(nom);
        }
        curseur.close();

        return listeJoueurs;
!!!146354.java!!!	getManchesTriees() : Vector<String>
        Log.d(TAG, "getManchesTriees()");

        Cursor curseur = sqlite.rawQuery("SELECT horodatage FROM manches ORDER BY horodatage DESC", null);

        Vector<String> listeManches = new Vector<>();

        while (curseur.moveToNext())
        {
            String date = curseur.getString(curseur.getColumnIndexOrThrow("horodatage"));
            listeManches.add(date);
        }
        curseur.close();

        return listeManches;
!!!214578.java!!!	getScoreElo(in nom : String) : int
        Log.d(TAG, "getScoreElo( nom = " + nom + " )");

        int scoreElo = 0;
        Cursor curseur = sqlite.rawQuery("SELECT scoreELO FROM joueurs WHERE nom = '" + nom + "'", null);
        if (curseur.moveToFirst()) {
            scoreElo = curseur.getInt(0);
        }
        curseur.close();

        return scoreElo;
!!!214706.java!!!	getNbManches(in nom : String) : int
        Log.d(TAG, "getNbManches( nom = " + nom + " )");

        int nbManches = 0;
        Cursor curseur = sqlite.rawQuery("SELECT manches FROM joueurs WHERE nom = '" + nom + "'", null);
        if (curseur.moveToFirst()) {
            nbManches = curseur.getInt(0);
        }
        curseur.close();

        return nbManches;
!!!214834.java!!!	getNbVictoires(in nom : String) : int
        Log.d(TAG, "getNbManches( nom = " + nom + " )");

        int nbVictoires = 0;
        Cursor curseur = sqlite.rawQuery("SELECT victoires FROM joueurs WHERE nom = '" + nom + "'", null);
        if (curseur.moveToFirst()) {
            nbVictoires = curseur.getInt(0);
        }
        curseur.close();

        return nbVictoires;
!!!214962.java!!!	supprimerJoueur(in nom : String) : void
        sqlite.execSQL("DELETE FROM joueurs WHERE nom = '" + nom + "'", null);
!!!215090.java!!!	supprimerManche(in date : String) : void
        sqlite.execSQL("DELETE FROM manches WHERE horodatage = '" + date + "'", null);
!!!215218.java!!!	getNomJoueur(in qualificatifJoueur : String, in date : String) : String
        Cursor curseur  = sqlite.rawQuery("SELECT joueurs.nom FROM joueurs INNERJOIN manches ON joueurs.id = '" + "manches." + qualificatifJoueur + "Id" + "' WHERE manches.horodatage = '" + date + "'", null);
        if(curseur.moveToFirst())
        {
            return curseur.toString();
        }
        else
        {
            return "Inconnu";
        }
