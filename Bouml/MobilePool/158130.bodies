class Communication
!!!215346.java!!!	getInstance(in peripherique : int) : Communication
        if(communications[peripherique] == null)
            communications[peripherique] = new Communication();
        return communications[peripherique];
!!!215474.java!!!	getInstance(inout handler : Handler, in peripherique : int) : Communication
        if(communications[peripherique] == null)
            communications[peripherique] = new Communication(handler);
        else
            communications[peripherique].setHandler(handler);
        return communications[peripherique];
!!!146738.java!!!	Communication()
        activer();
!!!146866.java!!!	Communication(inout handler : Handler)
        this.handler = handler;
        activer();
!!!146994.java!!!	setHandler(inout handler : Handler) : void
        this.handler = handler;
!!!147122.java!!!	activer() : void
        this.adaptateurBluetooth = BluetoothAdapter.getDefaultAdapter();
        if(this.adaptateurBluetooth == null)
        {
            Log.e(TAG, "Bluetooth non supporte par l'appareil.");
        }
        else if(!adaptateurBluetooth.isEnabled())
        {
            Log.d(TAG, "Bluetooth désactive, activation");
            adaptateurBluetooth.enable();
        }
        else
        {
            Log.d(TAG, "Bluetooth active");
        }
!!!147250.java!!!	rechercherTables() : void
        /**
         * @todo Rechercher les tables
         */
!!!147378.java!!!	seConnecter(in nomPeripherique : String) : boolean
        // Activer le Bluetooth
        activer();

        // Rechercher les appareils déjà appairés
        Set<BluetoothDevice> peripheriquesAppaires = adaptateurBluetooth.getBondedDevices();
        if(peripheriquesAppaires.size() > 0)
        {
            Log.e(TAG, "Nb appareils appairés : " + peripheriquesAppaires.size());
            for(BluetoothDevice appareil: peripheriquesAppaires)
            {
                if(appareil.getName().contains(nomPeripherique))
                {
                    this.peripherique = appareil;
                    break;
                }
            }
        }
        if(peripherique == null)
        {
            Log.e(TAG, "Appareil Bluetooth non trouve");
            return false;
        }
        else
        {
            Log.d(TAG,
                  "Appareil Bluetooth sélectionné : " + peripherique.getName() + " " +
                    peripherique.getAddress());
            return creerSocket();
        }
!!!147506.java!!!	seDeconnecter() : void
        try {
            if (inputStream != null) {
                inputStream.close();
            }
            if (outputStream != null) {
                outputStream.close();
            }
            if (canalBluetooth != null) {
                canalBluetooth.close();
            }
            connecte = false;
            if (handler != null) {
                Message messageHandler = new Message();
                messageHandler.what = DECONNEXION_BLUETOOTH;
                messageHandler.obj = peripherique.getName();
                handler.sendMessage(messageHandler);
            }
        } catch (Exception e) {
            Log.d(TAG, "Erreur lors de la fermeture des connexions.");
        }
!!!147634.java!!!	creerSocket() : boolean
        // Créer le canal Bluetooth
        try
        {
            canalBluetooth = peripherique.createRfcommSocketToServiceRecord(identifiantUUID);
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la creation du canal");
            return false;
        }
        // Connecter le canal
        try
        {
            canalBluetooth.connect();
            inputStream  = canalBluetooth.getInputStream();
            outputStream = canalBluetooth.getOutputStream();
            connecte     = true;
            if(handler != null)
            {
                Log.d(TAG, "Message handler");
                Message messageHandler = new Message();
                messageHandler.what    = CONNEXION_BLUETOOTH;
                messageHandler.obj     = peripherique.getName();
                handler.sendMessage(messageHandler);
            }
            // Démarrer la reception
            recevoir();
            Log.d(TAG, "Canal Bluetooth connecté");
            return true;
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la connexion du canal");
            try
            {
                canalBluetooth.close();
            }
            catch(IOException closeException)
            {
                Log.e(TAG, "Erreur lors de la fermeture du socket");
            }
            connecte = false;
            return false;
        }
!!!147762.java!!!	deconnecter() : void
        // Fermer les connexions et le socket
        try
        {
            if(inputStream != null)
            {
                inputStream.close();
            }
            if(outputStream != null)
            {
                outputStream.close();
            }
            if(canalBluetooth != null)
            {
                canalBluetooth.close();
            }
            connecte = false;
            if(handler != null)
            {
                Message messageHandler = new Message();
                messageHandler.what    = DECONNEXION_BLUETOOTH;
                messageHandler.obj     = peripherique.getName();
                handler.sendMessage(messageHandler);
            }
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la fermeture des connexions.");
        }
!!!147890.java!!!	envoyer(in message : int) : void
        if(!connecte)
            return;
        if(canalBluetooth == null)
            return;

        new Thread() {
            @Override
            public void run()
            {
                try
                {
                    if(!canalBluetooth.isConnected())
                    {
                        Log.d(TAG, "envoyer() socket non connecté !");
                    }
                    else
                    {
                        Log.d(TAG, "envoyer() 0x" + Integer.toHexString(message));
                        outputStream.write(message);
                        outputStream.flush();
                    }
                }
                catch(IOException e)
                {
                    Log.e(TAG, "Erreur lors de l'envoi de données");
                }
            }
        }.start();
!!!215602.java!!!	envoyer(in message : String) : void
        if(!connecte)
            return;
        if(canalBluetooth == null)
            return;

        new Thread() {
            @Override
            public void run()
            {
                try
                {
                    if(!canalBluetooth.isConnected())
                    {
                        Log.d(TAG, "envoyer() socket non connecté !");
                    }
                    else
                    {
                        Log.d(TAG, "envoyer( " + message + " )");
                        outputStream.write(message.getBytes());
                        outputStream.flush();
                    }
                }
                catch(IOException e)
                {
                    Log.e(TAG, "Erreur lors de l'envoi de données");
                }
            }
        }.start();
!!!148018.java!!!	recevoir() : void
        Log.d(TAG, "recevoir()");
        filExecutionReception = new Thread(new Runnable() {
            @Override
            public void run()
            {
                Log.d(TAG, "recevoir() thread démarré");
                while(connecte)
                {
                    try
                    {
                        int message = (char)inputStream.read();
                        if(message != -1)
                        {
                            if(handler != null)
                            {
                                Message messageHandler = new Message();
                                messageHandler.what    = RECEPTION_BLUETOOTH;
                                messageHandler.obj     = message;
                                handler.sendMessage(messageHandler);
                            }
                        }
                    }
                    catch(IOException e)
                    {
                        Log.e(TAG, "Erreur lors de la réception de données");
                        deconnecter();
                    }
                }
                Log.d(TAG, "recevoir() thread arrêté");
            }
        });
        filExecutionReception.start();
