class BaseDeDonnees
!!!141866.java!!!	BaseDeDonnees(inout context : Context)
        super(context, POOL_DONNEES, null, VERSION_POOL_DONNEES);
        Log.d(TAG, "BaseDeDonnees()");
        if(sqlite == null)
            sqlite = this.getWritableDatabase();
!!!141994.java!!!	onCreate(inout sqlite : SQLiteDatabase) : void
        Log.d(TAG, "onCreate()");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS joueurs (id INTEGER PRIMARY KEY AUTOINCREMENT, nom TEXT UNIQUE NOT NULL, parties INTEGER DEFAULT 0, victoires INTEGER DEFAULT 0)");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS manches (id INTEGER PRIMARY KEY AUTOINCREMENT, horodatage DATETIME NOT NULL, gagnantId INTEGER, perdantId INTEGER, numeroTable INTEGER, FOREIGN KEY (gagnantId) REFERENCES joueurs(id) ON DELETE CASCADE, FOREIGN KEY (perdantId) REFERENCES joueurs(id) ON DELETE CASCADE)");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS tours (id INTEGER PRIMARY KEY AUTOINCREMENT, joueurId INTEGER, mancheId INTEGER, FOREIGN KEY (joueurId) REFERENCES joueurs(id) ON DELETE CASCADE, FOREIGN KEY (mancheId) REFERENCES manches(id) ON DELETE CASCADE)");
        sqlite.execSQL(
                "CREATE TABLE IF NOT EXISTS empoches (id INTEGER PRIMARY KEY AUTOINCREMENT, tourId INTEGER, poche INTEGER, couleur INTEGER, FOREIGN KEY (tourId) REFERENCES tours(id) ON DELETE CASCADE)");

        initialiserBaseDeDonnees(sqlite);
!!!142122.java!!!	onUpgrade(inout sqlite : SQLiteDatabase, in oldVersion : int, in newVersion : int) : void
        Log.d(TAG, "onUpgrade()");
        sqlite.execSQL("DROP TABLE IF EXISTS empoches");
        sqlite.execSQL("DROP TABLE IF EXISTS tours");
        sqlite.execSQL("DROP TABLE IF EXISTS manches");
        sqlite.execSQL("DROP TABLE IF EXISTS joueurs");
        onCreate(sqlite);
!!!142250.java!!!	getInstance(inout context : Context) : BaseDeDonnees
        if(baseDeDonnees == null)
        {
            baseDeDonnees = new BaseDeDonnees(context);
        }
        return baseDeDonnees;
!!!142378.java!!!	ajouterNom(in nomJoueur : String) : void
        try {
            Log.d(TAG, "ajouterNom(" + nomJoueur + ")");
            sqlite.execSQL("INSERT INTO joueurs (nom) VALUES ('" + nomJoueur + "')");
        } catch (SQLiteConstraintException e) {
        Log.d(TAG, "Nom déjà présent dans la base de donnée");
        }
!!!142506.java!!!	ajouterManche(inout joueurs : String [[]], in indexJoueurGagnant : int, inout manche : Vector<Vector<int[]>>, in numeroTable : int) : void
        String gagnant = joueurs[indexJoueurGagnant];
        String perdant = joueurs[(indexJoueurGagnant + 1) % BlackBall.NB_JOUEURS];
        Log.d(TAG, "ajouterManche() gagnant = " + gagnant + " perdant = " + perdant);
        sqlite.execSQL(
                "UPDATE joueurs SET parties = parties + 1, victoires = victoires + 1 WHERE joueurs.nom = '" + gagnant + "'");
        sqlite.execSQL("UPDATE joueurs SET parties = parties + 1 WHERE joueurs.nom = '" + perdant + "'");

        int gagnantId = ID_DEFAUT;
        int perdantId = ID_DEFAUT;
         Cursor curseur = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + gagnant + "'", null);
        if (curseur.moveToFirst()) {
            gagnantId = curseur.getInt(0);
        }
        curseur.close();
        curseur = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + perdant + "'", null);
        if (curseur.moveToFirst()) {
            perdantId = curseur.getInt(0);
        }
        curseur.close();

        //int gagnantId = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + gagnant + "'", null).getInt(0);
        //int perdantId = sqlite.rawQuery("SELECT id FROM joueurs WHERE nom = '" + perdant + "'", null).getInt(0);
        try {
            sqlite.execSQL("INSERT INTO manches (horodatage, gagnantId, perdantId, numeroTable) VALUES (datetime('now'), '" + gagnantId + "', '" + perdantId + "', '" + numeroTable + "')");
        } catch (Exception e){
            Log.d(TAG, "INSERT INTO manches " + e );
        }
        int[] participantsId = {perdantId, gagnantId};
        for(int indexTour = 0; indexTour < manche.size(); indexTour++)
        {
            int mancheId = ID_DEFAUT;
            curseur = sqlite.rawQuery("SELECT max(id) FROM manches", null);
            if(curseur.moveToFirst()) {
                mancheId = curseur.getInt(0);
            }
            curseur.close();
            //int mancheId = sqlite.rawQuery("SELECT max(id) FROM manches", null).getInt(0);

            int joueurId = participantsId[(indexTour + indexJoueurGagnant) % BlackBall.NB_JOUEURS];
            try {
                sqlite.execSQL("INSERT INTO tours (joueurId, mancheId) VALUES ('" + joueurId + "', '" + mancheId + "')");
            } catch (Exception e) {
                Log.d(TAG, "INSERT INTO tours " + e );
            }

            for(int indexEmpoche = 0; indexEmpoche < manche.get(indexTour).size();
                indexEmpoche++)
            {
                int poche = manche.get(indexTour).get(indexEmpoche)[0];
                int couleur = manche.get(indexTour).get(indexEmpoche)[1];
                try {
                    sqlite.execSQL("INSERT INTO empoches (tourId, poche, couleur) VALUES ((SELECT max(id) FROM tours), '" + poche + "', '" + couleur + "')");
                } catch (Exception e) {
                    Log.d(TAG, "INSERT INTO empoches " + e );
                }
            }
        }
!!!142634.java!!!	getNomsJoueurs() : ArrayList<String>
        ArrayList<String> nomsJoueurs = new ArrayList<String>();
        Cursor            cursor      = sqlite.rawQuery("SELECT nom FROM joueurs", null);
        if(cursor.moveToFirst())
        {
            do
            {
                String nomJoueur = cursor.getString(0);
                nomsJoueurs.add(nomJoueur);
            } while(cursor.moveToNext());
        }
        cursor.close();
        Log.d(TAG, "getNomsJoueurs() " + nomsJoueurs);
        return nomsJoueurs;
!!!142762.java!!!	initialiserBaseDeDonnees(inout sqlite : SQLiteDatabase) : void
        Log.d(TAG, "initialiserBaseDeDonnees()");
        // Pour les tests
        sqlite.execSQL(
                "INSERT INTO joueurs(nom, parties, victoires) VALUES ('TRICHET Clément', 3, 3);");
        sqlite.execSQL(
                "INSERT INTO joueurs(nom, parties, victoires) VALUES ('GAUME Benjamin', 3, 0);");
