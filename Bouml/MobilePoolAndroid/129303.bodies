class Manche
!!!135703.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        Log.d(TAG, "onCreate()");

        super.onCreate(savedInstanceState);
        setContentView(R.layout.manche);

        initialiserHandler();
        initialiserAttributs();
        initialiserRessources();
        communications[Communication.TABLE].envoyer(ProtocoleTable.DEBUT);
!!!135831.java!!!	initialiserAttributs() : void
        Log.d(TAG, "initialiserAttributs() ");

        baseDonnees = BaseDeDonnees.getInstance(this);
        numeroTable = NUMERO_TABLE_DEFAUT;
        communications[Communication.TABLE] = Communication.getInstance(handler, Communication.TABLE);
        Intent activiteManche = getIntent();
        joueurs         = new String[BlackBall.NB_JOUEURS];
        joueurs[PREMIER_JOUEUR] = activiteManche.getStringExtra("joueur1");
        joueurs[SECOND_JOUEUR]  = activiteManche.getStringExtra("joueur2");
        table = activiteManche.getStringExtra("choixNomTable");
        fenetreFinDeManche = new FinDeManche(this, joueurs[PREMIER_JOUEUR], joueurs[SECOND_JOUEUR]);
        connexionTable = activiteManche.getBooleanExtra("connexionTable", false);

        initialiserAttributsDeDebutDeManche();
!!!135959.java!!!	initialiserRessources() : void
        Log.d(TAG, "initialiserRessources() ");

        nomJoueurs = new TextView[BlackBall.NB_JOUEURS];
        nomJoueurs[PREMIER_JOUEUR] = (TextView)findViewById(R.id.Joueur1);
        nomJoueurs[SECOND_JOUEUR] = (TextView)findViewById(R.id.Joueur2);

        nbBillesEmpochees = new TextView[BlackBall.NB_POCHES][BlackBall.NB_GROUPES_BILLES];
        fondBillesEmpochees = new ImageView[BlackBall.NB_POCHES][BlackBall.NB_GROUPES_BILLES];

        boutonQuitter = (Button) findViewById(R.id.boutonQuitter);
        boutonQuitter.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                communications[Communication.TABLE].seDeconnecter();
                Intent intent = new Intent(Manche.this, EcranPrincipal.class);
                startActivity(intent);
            }
        });

        boutonAfficher = (Button) findViewById(R.id.boutonAfficher);
        boutonAfficher.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                communications[Communication.ECRAN] = Communication.getInstance(Communication.ECRAN);
                communications[Communication.ECRAN].seConnecter("EcranPool");
                String trameDebut = ProtocoleEcran.DELIMITEUR_DEBUT + ProtocoleEcran.TYPE_NOM + ProtocoleEcran.DELIMITEUR_CHAMPS + ProtocoleEcran.DELIMITEUR_CHAMPS + ProtocoleEcran.TABLES.charAt(Character.getNumericValue(table.charAt(CHAR_NUMERO_TABLE)) - 1) + joueurs[PREMIER_JOUEUR] + ProtocoleEcran.DELIMITEUR_CHAMPS + joueurs[SECOND_JOUEUR] + ProtocoleEcran.DELIMITEUR_FIN;
                communications[Communication.ECRAN].envoyer(trameDebut);
            }
        });

        nbBillesEmpochees[BlackBall.POCHE_HAUT_GAUCHE][BlackBall.JAUNE]     = (TextView) findViewById(R.id.poche0BilleJauneNombre);
        nbBillesEmpochees[BlackBall.POCHE_HAUT_GAUCHE][BlackBall.ROUGE]     = (TextView) findViewById(R.id.poche0BilleRougeNombre);
        nbBillesEmpochees[BlackBall.POCHE_HAUT_DROIT][BlackBall.JAUNE]      = (TextView) findViewById(R.id.poche1BilleJauneNombre);
        nbBillesEmpochees[BlackBall.POCHE_HAUT_DROIT][BlackBall.ROUGE]      = (TextView) findViewById(R.id.poche1BilleRougeNombre);
        nbBillesEmpochees[BlackBall.POCHE_MILIEU_DROIT][BlackBall.JAUNE]    = (TextView) findViewById(R.id.poche2BilleJauneNombre);
        nbBillesEmpochees[BlackBall.POCHE_MILIEU_DROIT][BlackBall.ROUGE]    = (TextView) findViewById(R.id.poche2BilleRougeNombre);
        nbBillesEmpochees[BlackBall.POCHE_BAS_DROIT][BlackBall.JAUNE]       = (TextView) findViewById(R.id.poche3BilleJauneNombre);
        nbBillesEmpochees[BlackBall.POCHE_BAS_DROIT][BlackBall.ROUGE]       = (TextView) findViewById(R.id.poche3BilleRougeNombre);
        nbBillesEmpochees[BlackBall.POCHE_BAS_GAUCHE][BlackBall.JAUNE]      = (TextView) findViewById(R.id.poche4BilleJauneNombre);
        nbBillesEmpochees[BlackBall.POCHE_BAS_GAUCHE][BlackBall.ROUGE]      = (TextView) findViewById(R.id.poche4BilleRougeNombre);
        nbBillesEmpochees[BlackBall.POCHE_MILIEU_GAUCHE][BlackBall.JAUNE]   = (TextView) findViewById(R.id.poche5BilleJauneNombre);
        nbBillesEmpochees[BlackBall.POCHE_MILIEU_GAUCHE][BlackBall.ROUGE]   = (TextView) findViewById(R.id.poche5BilleRougeNombre);

        fondBillesEmpochees[BlackBall.POCHE_HAUT_GAUCHE][BlackBall.JAUNE]   = (ImageView) findViewById(R.id.poche0BilleJauneView);
        fondBillesEmpochees[BlackBall.POCHE_HAUT_GAUCHE][BlackBall.ROUGE]   = (ImageView) findViewById(R.id.poche0BilleRougeView);
        fondBillesEmpochees[BlackBall.POCHE_HAUT_DROIT][BlackBall.JAUNE]    = (ImageView) findViewById(R.id.poche1BilleJauneView);
        fondBillesEmpochees[BlackBall.POCHE_HAUT_DROIT][BlackBall.ROUGE]    = (ImageView) findViewById(R.id.poche1BilleRougeView);
        fondBillesEmpochees[BlackBall.POCHE_MILIEU_DROIT][BlackBall.JAUNE]  = (ImageView) findViewById(R.id.poche2BilleJauneView);
        fondBillesEmpochees[BlackBall.POCHE_MILIEU_DROIT][BlackBall.ROUGE]  = (ImageView) findViewById(R.id.poche2BilleRougeView);
        fondBillesEmpochees[BlackBall.POCHE_BAS_DROIT][BlackBall.JAUNE]     = (ImageView) findViewById(R.id.poche3BilleJauneView);
        fondBillesEmpochees[BlackBall.POCHE_BAS_DROIT][BlackBall.ROUGE]     = (ImageView) findViewById(R.id.poche3BilleRougeView);
        fondBillesEmpochees[BlackBall.POCHE_BAS_GAUCHE][BlackBall.JAUNE]    = (ImageView) findViewById(R.id.poche4BilleJauneView);
        fondBillesEmpochees[BlackBall.POCHE_BAS_GAUCHE][BlackBall.ROUGE]    = (ImageView) findViewById(R.id.poche4BilleRougeView);
        fondBillesEmpochees[BlackBall.POCHE_MILIEU_GAUCHE][BlackBall.JAUNE] = (ImageView) findViewById(R.id.poche5BilleJauneView);
        fondBillesEmpochees[BlackBall.POCHE_MILIEU_GAUCHE][BlackBall.ROUGE] = (ImageView) findViewById(R.id.poche5BilleRougeView);

        billesRestantes = new ImageView[BlackBall.NB_JOUEURS][BlackBall.NB_BILLES_COULEUR];

        billesRestantes[PREMIER_JOUEUR][0] = (ImageView) findViewById(R.id.bille0Joueur1);
        billesRestantes[PREMIER_JOUEUR][1] = (ImageView) findViewById(R.id.bille1Joueur1);
        billesRestantes[PREMIER_JOUEUR][2] = (ImageView) findViewById(R.id.bille2Joueur1);
        billesRestantes[PREMIER_JOUEUR][3] = (ImageView) findViewById(R.id.bille3Joueur1);
        billesRestantes[PREMIER_JOUEUR][4] = (ImageView) findViewById(R.id.bille4Joueur1);
        billesRestantes[PREMIER_JOUEUR][5] = (ImageView) findViewById(R.id.bille5Joueur1);
        billesRestantes[PREMIER_JOUEUR][6] = (ImageView) findViewById(R.id.bille6Joueur1);

        billesRestantes[SECOND_JOUEUR][0] = (ImageView) findViewById(R.id.bille0Joueur2);
        billesRestantes[SECOND_JOUEUR][1] = (ImageView) findViewById(R.id.bille1Joueur2);
        billesRestantes[SECOND_JOUEUR][2] = (ImageView) findViewById(R.id.bille2Joueur2);
        billesRestantes[SECOND_JOUEUR][3] = (ImageView) findViewById(R.id.bille3Joueur2);
        billesRestantes[SECOND_JOUEUR][4] = (ImageView) findViewById(R.id.bille4Joueur2);
        billesRestantes[SECOND_JOUEUR][5] = (ImageView) findViewById(R.id.bille5Joueur2);
        billesRestantes[SECOND_JOUEUR][6] = (ImageView) findViewById(R.id.bille6Joueur2);

        barreProgression = (ProgressBar) findViewById(R.id.barreProgression);
        barreProgression.setMax(NB_PALIERS);
        barreProgression.setProgress(NB_PALIERS);
        decompte = (TextView) findViewById(R.id.decompte);
        fondCompteur = (View) findViewById(R.id.fondCompteur);
        initialiserRessourcesDeDebutdeManche();
!!!136087.java!!!	empocherBilleCouleur(in numero : int, in couleur : int) : void
        Log.d(TAG, "empocherBilleCouleur( numero" + numero + " couleur = " + couleur + " )");

        if(! couleursDefinies)
        {
            couleursDefinies = true;
            couleursJoueurs.put(joueurs[joueurActif], couleur);
            couleursJoueurs.put(joueurs[(joueurActif + 1) % BlackBall.NB_JOUEURS], (couleur + 1) % BlackBall.NB_GROUPES_BILLES);

            int couleurFond = couleursJoueurs.get(joueurs[joueurActif]) == BlackBall.JAUNE ? getResources().getColor(R.color.jaune) : getResources().getColor(R.color.rouge);
            fondCompteur.setBackgroundTintList(ColorStateList.valueOf(couleurFond));
            afficherBillesRestantes(couleur);
        }
        billes[couleur]--;
        int joueurBille = (couleursJoueurs.get(joueurs[PREMIER_JOUEUR]) == couleur) ? PREMIER_JOUEUR : SECOND_JOUEUR;
        billesRestantes[joueurBille][billes[couleur]].setVisibility(View.INVISIBLE);

        poches[numero][couleur]++;
        nbBillesEmpochees[numero][couleur].setText("" + poches[numero][couleur]);
        if(poches[numero][couleur] == 1)
        {
            fondBillesEmpochees[numero][couleur].setVisibility(View.VISIBLE);
            nbBillesEmpochees[numero][couleur].setVisibility(View.VISIBLE);
        }
        demarrerCompteARebours();
!!!136215.java!!!	afficherBillesRestantes(in couleurBille : int) : void
        Log.d(TAG, "afficherBillesRestantes( couleurBille = " + couleurBille + " )");
        int couleur;
        for(int joueur = PREMIER_JOUEUR; joueur < BlackBall.NB_JOUEURS; joueur++)
        {
            couleur = (couleursJoueurs.get(joueurs[(joueur + joueurActif) % BlackBall.NB_JOUEURS]) == couleurBille) ? BlackBall.IMAGES_BILLES[couleurBille]: BlackBall.IMAGES_BILLES[(couleurBille + 1) % BlackBall.NB_GROUPES_BILLES];
            Log.d(TAG, "afficherBillesRestantes() couleur = " + couleur);
            nomJoueurs[joueur].setTextColor(couleur);  //!<@fixme doesn't work
            for(int bille = 0; bille < billes[couleursJoueurs.get(joueurs[(joueur + joueurActif) % BlackBall.NB_JOUEURS])]; bille++)
            {
                billesRestantes[(joueur + joueurActif) % BlackBall.NB_JOUEURS][bille].setImageResource(couleur);
                billesRestantes[(joueur + joueurActif) % BlackBall.NB_JOUEURS][bille].setVisibility(View.VISIBLE);
            }
        }
!!!136343.java!!!	empocherBilleBlanche() : void
        Log.d(TAG, "empocherBilleBlanche()");
        demarrerCompteARebours();
        //!< @todo Ask client!
!!!136471.java!!!	empocherBilleNoire() : void
        Log.d(TAG, "empocherBilleNoire()");

        arreterCompteARebours();
        int indexJoueurGagnant;
        if(couleursDefinies && billes[joueurActif] == 0) {
            indexJoueurGagnant = joueurActif;
        }
        else {
            indexJoueurGagnant = (joueurActif + 1) % BlackBall.NB_JOUEURS;
        }

        baseDonnees.ajouterManche(joueurs, indexJoueurGagnant, manche, numeroTable);
        fenetreFinDeManche.setTitle("Partie terminée");
        fenetreFinDeManche.setMessage("Bravo " + joueurs[indexJoueurGagnant] + " !");
        fenetreFinDeManche.show();
        communications[Communication.TABLE].envoyer(ProtocoleTable.ARRET);
!!!136599.java!!!	traiterTrameEmpoche(in trame : byte) : void
        int couleur = (int)(trame & ProtocoleTable.MASQUE_COULEUR);
        int poche = (int)((trame & ProtocoleTable.MASQUE_POCHE) >> ProtocoleTable.CHAMP_POCHE);
        int[] empoche = {poche, couleur};
        manche.get(manche.size() - 1).add(empoche);

        if(communications[Communication.ECRAN] != null)
        {
            String trameEnvoie = "" + ProtocoleEcran.DELIMITEUR_DEBUT + ProtocoleEcran.DELIMITEUR_CHAMPS + ProtocoleEcran.TABLES.charAt(Character.getNumericValue(table.charAt(CHAR_NUMERO_TABLE)) - 1) + ProtocoleEcran.TYPE_EMPOCHE + ProtocoleEcran.DELIMITEUR_CHAMPS + ProtocoleEcran.POCHES.charAt(poche) + ProtocoleEcran.DELIMITEUR_CHAMPS + ProtocoleEcran.COULEURS.charAt(couleur) + ProtocoleEcran.DELIMITEUR_FIN;
            communications[Communication.ECRAN].envoyer(trameEnvoie);
        }
        if(couleur == BlackBall.NOIRE)
        {
            empocherBilleNoire();
        }
        else if(couleur == BlackBall.BLANCHE)
        {
            empocherBilleBlanche();
        }
        else
        {
            empocherBilleCouleur(poche, couleur);
        }
!!!136727.java!!!	traiterTrameService(in trame : byte) : void
        Log.d(TAG, "traiterTrameService( 0b" + ProtocoleTable.byteToBinaryString(trame) + ")");
        if(mancheDemarree)
        {
            if(communications[Communication.ECRAN] != null)
            {
                String trameEnvoie = "" + ProtocoleEcran.DELIMITEUR_DEBUT + ProtocoleEcran.TYPE_CHANGEMENT_JOUEUR + ProtocoleEcran.DELIMITEUR_CHAMPS + ProtocoleEcran.TABLES.charAt(Character.getNumericValue(table.charAt(CHAR_NUMERO_TABLE)) - 1) + ProtocoleEcran.DELIMITEUR_CHAMPS + ProtocoleEcran.JOUEURS.charAt(joueurActif) + ProtocoleEcran.DELIMITEUR_FIN;
                communications[Communication.ECRAN].envoyer(trameEnvoie);
            }

            joueurActif = joueurActif == PREMIER_JOUEUR ? SECOND_JOUEUR : PREMIER_JOUEUR;
            manche.add(new Vector<int[]>());
            if(couleursDefinies)
            {
                int couleurFond = (couleursJoueurs.get(joueurs[joueurActif]) == BlackBall.JAUNE) ? getResources().getColor(R.color.jaune) : getResources().getColor(R.color.rouge);
                fondCompteur.setBackgroundTintList(ColorStateList.valueOf(couleurFond));
            }
        }
        else
        {
            mancheDemarree = true;
        }
        demarrerCompteARebours();
!!!136855.java!!!	initialiserHandler() : void
        this.handler = new Handler(this.getMainLooper())
        {
            @Override
            public void handleMessage(@NonNull Message message)
            {
                // Log.d(TAG, "[Handler] id message = " + message.what);
                // Log.d(TAG, "[Handler] message = " + message.obj.toString());

                switch(message.what)
                {
                    case Communication.CONNEXION_BLUETOOTH:
                        Log.d(TAG, "[Handler] CONNEXION_BLUETOOTH");
                        connexionTable = true;
                        break;
                    case Communication.RECEPTION_BLUETOOTH:
                        Log.d(TAG, "[Handler] RECEPTION_BLUETOOTH");
                        Log.d(TAG, "message = 0x" + Integer.toHexString((int)message.obj));
                        byte trame = ((Integer)message.obj).byteValue();
                        Log.d(TAG, "trame = " + ProtocoleTable.byteToBinaryString(trame));
                        if((trame & ProtocoleTable.MASQUE_TYPE) != 0)
                        {
                            traiterTrameService(trame);
                        }
                        else
                        {
                            traiterTrameEmpoche(trame);
                        }
                        break;
                    case Communication.DECONNEXION_BLUETOOTH:
                        Log.d(TAG, "[Handler] DECONNEXION_BLUETOOTH");
                        connexionTable = false;
                        break;
                }
            }
        };
!!!136983.java!!!	recommencer() : void
        reinitialiserAttributs();
        initialiserRessourcesDeDebutdeManche();
        communications[Communication.TABLE].envoyer(ProtocoleTable.DEBUT);
        //!<@todo réinit compteur à faire ou déjà fait dans une des fonctions?
!!!137111.java!!!	reinitialiserAttributs() : void
        String premierJoueur = joueurs[SECOND_JOUEUR];
        joueurs[SECOND_JOUEUR] = joueurs[PREMIER_JOUEUR];
        joueurs[PREMIER_JOUEUR] = premierJoueur;
        initialiserAttributsDeDebutDeManche();
!!!137239.java!!!	initialiserAttributsDeDebutDeManche() : void
        Log.d(TAG, "initialiserAttributsDeDebutDeManche()");
        billes = new Integer[BlackBall.NB_JOUEURS];
        billes[BlackBall.ROUGE] = BlackBall.NB_BILLES_COULEUR;
        billes[BlackBall.JAUNE] = BlackBall.NB_BILLES_COULEUR;

        poches = new Integer[BlackBall.NB_POCHES][BlackBall.NB_JOUEURS];
        for(int numero = 0; numero < BlackBall.NB_POCHES; numero++)
        {
            poches[numero] = new Integer[2];
            Arrays.fill(poches[numero], 0);
        }

        manche = new Vector<Vector<int[]>>();
        manche.add(new Vector<int[]>());

        couleursJoueurs = new HashMap<>();
        joueurActif = PREMIER_JOUEUR;
        couleursDefinies = false;
        mancheDemarree = false;
!!!137367.java!!!	initialiserRessourcesDeDebutdeManche() : void
        for (int numero = 0; numero < nbBillesEmpochees.length; numero++) {
            for (int couleur = 0; couleur < nbBillesEmpochees[numero].length; couleur++) {
                fondBillesEmpochees[numero][couleur].setVisibility(View.INVISIBLE);
                nbBillesEmpochees[numero][couleur].setVisibility(View.INVISIBLE);
                Log.d(TAG, "initialiserRessourcesdeDebutdeManche(), numero " + numero + ", couleur " + couleur);
                nbBillesEmpochees[numero][couleur].setText("0");
            }
        }
        fondCompteur.setBackgroundTintList(ColorStateList.valueOf(getResources().getColor(R.color.cyan)));
        decompte.setText(String.valueOf(DUREE_TIR / MILLISEC_PAR_SEC));
        nomJoueurs[PREMIER_JOUEUR].setText("" + joueurs[PREMIER_JOUEUR]);
        nomJoueurs[SECOND_JOUEUR].setText("" + joueurs[SECOND_JOUEUR]);
        nomJoueurs[PREMIER_JOUEUR].setTextColor(ColorStateList.valueOf(getResources().getColor(R.color.cyan)));
        nomJoueurs[SECOND_JOUEUR].setTextColor(ColorStateList.valueOf(getResources().getColor(R.color.cyan)));
        for(int joueur = PREMIER_JOUEUR; joueur < BlackBall.NB_JOUEURS; joueur++)
        {
            for(int bille = 0; bille < BlackBall.NB_BILLES_COULEUR; bille++)
            {
                billesRestantes[joueur][bille].setVisibility(View.INVISIBLE);
            }
        }
!!!137495.java!!!	demarrerCompteARebours() : void
        if (compteARebours != null) {
            compteARebours.cancel();
        }
        barreProgression.setProgress(NB_PALIERS);
        compteARebours = new CountDownTimer(DUREE_TIR, PULSATION) {
            @Override
            public void onTick(long milliSecondesRestantes) {
                decompte.setText(String.valueOf(milliSecondesRestantes / MILLISEC_PAR_SEC));
                barreProgression.setProgress((int) milliSecondesRestantes / PULSATION);
            }

            @Override
            public void onFinish() {
                // Do nothing ?
            }
        }.start();
!!!137623.java!!!	arreterCompteARebours() : void
        if (compteARebours != null) {
            compteARebours.cancel();
        }
